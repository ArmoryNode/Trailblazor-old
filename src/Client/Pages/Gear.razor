@page "/gear"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Trailblazor.Shared.ViewModels
@using Trailblazor.Shared.Models
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@*@attribute [Authorize]*@

<h3>Gear</h3>

<button type="button" class="btn btn-primary" @onclick="OnClick">Click me!</button>
<button type="button" class="btn btn-primary" @onclick="SeedItem">Seed Item</button>

@if (GearItems is null || GearItems.Count == 0)
{
    <h2>Click on the button to load gear items.</h2>
}
else
{
    <div class="row mt-3">
        @foreach (var item in GearItems)
        {
            <div class="col-12 col-sm-6 col-xl-4">
                <Card>
                    <CardTitle>@item.Name</CardTitle>
                    <CardBody>
                        <div class="tb-card-text">
                            @item.Description
                        </div>
                        <ActionButton Theme="Color.Primary" Type="ButtonType.Edit" />
                    </CardBody>
                </Card>
            </div>
        }
    </div>
}

<button type="button" class="btn btn-success" @onclick="() => Window!.Toggle()">Open Window</button>

<Window Title="Window" @ref="Window" Top="50vh" Left="50vw" Width="600" Height="400">
    <WindowContent>
        <div class="container p-4">
            <div class="form-row">
                <div class="col-3">
                    <label class="form-label" for="testInput">Test Input</label>
                    <input id="testInput" class="form-control" type="text" value="Test" />
                </div>
            </div>
        </div>
    </WindowContent>
</Window>

@code {
    private Window? Window { get; set; }

    public List<GearListViewModel> GearItems { get; set; } = new();

    private async Task OnClick()
    {
        try
        {
            var fetchedGearItems = await Http.GetFromJsonAsync<IEnumerable<GearListViewModel>>("/api/GearList");

            if (fetchedGearItems is not null)
            {
                if (GearItems.Any())
                    GearItems.Clear();

                GearItems.AddRange(fetchedGearItems);
            }

        }
        catch (AccessTokenNotAvailableException accessTokenException)
        {
            accessTokenException.Redirect();
        }
    }

    private async Task SeedItem()
    {
        try
        {
            var newItem = new GearListViewModel
            {
                Id = Guid.NewGuid(),
                Name = "Seeded Item",
                Description = "This is a test item",
                OwnerId = Guid.Parse("b7838c4c-2b5c-4fb7-a93b-711229cfa509"),
                OwnerName = "ArmoryNode",
                Created = DateTimeOffset.Now,
                LastModified = DateTimeOffset.Now,
                Categories = new List<Category>()
                {
                    new()
                    {
                        Title = "Category", 
                        SortOrder = 0,
                        GearItems = new List<GearItem>
                        {
                            new()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Gear Item 1",
                                Description = "Gear Item 1 Description",
                                Quantity = 1,
                                Weight = new()
                                {
                                    Amount = 1,
                                    Unit = WeightUnit.Pounds
                                }
                            }
                        }
                    }
                }
            };

            await Http.PostAsJsonAsync("/api/GearList", newItem);
        }
        catch (AccessTokenNotAvailableException accessTokenException)
        {
            accessTokenException.Redirect();
        }
    }
    //private ValueTask OpenItemLink(string link)
    //{
    //    return jsRuntime.InvokeVoidAsync("open", link, "_blank");
    //}
}
