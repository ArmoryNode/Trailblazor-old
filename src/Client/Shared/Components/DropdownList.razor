@typeparam TItemType

<div class="tb-dropdown-list @_dropdownClasses.Build" style="--dropdown-width: @_width" data-componentid="@_componentId">
    <div class="tb-dropdown-list-topbar" @onclick:stopPropagation="true" @onclick="OnDropdownClicked">
        <div class="tb-dropdown-list-topbar-content">
            @if (Value is not null)
            {
                if (SelectedItemTemplate is not null)
                {
                    @SelectedItemTemplate.Invoke(Value)
                }
                else
                {
                    @Value
                }
            }
            else
            {
                <span class="tb-dropdown-list-placeholder">@Placeholder</span>
            }
        </div>
    </div>
    <div class="tb-dropdown-list-body-container">
        <ul class="tb-dropdown-list-body">
            @foreach (var item in DataSource)
            {
                <li class="tb-dropdown-list-item @ItemIsSelected(item)" @onclick="async (args) => await OnItemSelected(args, item)">
                    @if (ListItemTemplate is not null)
                    {
                        @ListItemTemplate.Invoke(item)
                    }
                    else
                    {
                        @item
                    }
                </li>
            }
        </ul>
    </div>
</div>

@code {
    #region Configuration

    [Parameter]
    public ICollection<TItemType> DataSource { get; set; } = new List<TItemType>(0);

    [Parameter]
    public TItemType? Value { get; set; } = default;

    [Parameter]
    public EventCallback<TItemType> ValueChanged { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Select an item";

    [Parameter]
    public RenderFragment<TItemType>? SelectedItemTemplate { get; init; } = null;

    [Parameter]
    public RenderFragment<TItemType>? ListItemTemplate { get; init; } = null;

    private bool _opened = false;
    [Parameter]
    public bool Opened
    {
        get => _opened;
        set
        {
            if (value)
                _dropdownClasses.AddClass(_dropdownOpenedClass);
            else
                _dropdownClasses.RemoveClass(_dropdownOpenedClass);

            _opened = value;
        }
    }

    private string _width = "200px";
    [Parameter]
    public int Width
    {
        get => int.Parse(_width.Replace("px", string.Empty));
        set
        {
            _width = $"{value}px";
        }
    }

    #endregion

    #region Internal

    private readonly Guid _componentId = Guid.NewGuid();

    private const string _dropdownItemSelectedClass = "tb-dropdown-list-item-selected";
    private const string _dropdownOpenedClass = "tb-dropdown-list-opened";

    private readonly ClassBuilder _dropdownClasses = new ClassBuilder();

    private string ItemIsSelected(TItemType item)
    {
        if (Value is not null)
            return Value.Equals(item) ? _dropdownItemSelectedClass : string.Empty;

        return string.Empty;
    }

    #endregion

    #region Events

    public event EventHandler<bool>? DropdownClicked;
    public event EventHandler<TItemType>? ItemSelected;

    #endregion

    #region Event Handlers

    private void OnDropdownClicked(MouseEventArgs args)
    {
        Opened = !Opened;

        if (Opened)
            _dropdownClasses.AddClass(_dropdownOpenedClass);
        else
            _dropdownClasses.RemoveClass(_dropdownOpenedClass);

        DropdownClicked?.Invoke(this, Opened);
    }

    private async Task OnItemSelected(MouseEventArgs args, TItemType item)
    {
        await ValueChanged.InvokeAsync(item);
        ItemSelected?.Invoke(this, item);
        Opened = false;
    }

    #endregion

    #region Overrides

    protected override void OnParametersSet()
    {
        if (Opened)
            _dropdownClasses.AddClass(_dropdownOpenedClass);

        base.OnParametersSet();
    }

    #endregion
}
