@inject IJSRuntime JSRuntime

@inherits ComponentBase

@if (Modal && !Closed)
{
    <div class="tb-window-modal-overlay"></div>
}

@if (!Closed)
{
    <div class="tb-window" role="dialog" aria-labelledby="windowTitle_@_id" @ref="WindowContainer" style="@BuildWindowStyles">
        @if (Resizable)
        {
            <div class="tb-window-resize-handles">
                @{
                    string[] sides = { "left", "right", "top", "bottom" };
                    string[] corners = { "top-left", "top-right", "bottom-left", "bottom-right" };
                }
                @foreach (var side in sides)
                {
                    <div class="tb-window-resize-handle-@side" @onmousedown:preventDefault="true" @onmousedown="(args) => OnResizeSideHandleMouseDown(args, side)"></div>
                }

                @foreach (var corner in corners)
                {
                    <div class="tb-window-resize-handle-@corner" @onmousedown:preventDefault="true" @onmousedown="(args) => OnResizeCornerHandleMouseDown(args, corner)"></div>
                }
            </div>
        }
        <div class="tb-window-topbar" @onmousedown:preventDefault="true" @onmousedown="OnTopbarMouseDown">
            <span id="windowTitle_@_id" class="tb-window-title">@Title</span>
            <div class="tb-window-controls">
                <div class="tb-window-close" role="button" @onclick="CloseButtonClicked" @onclick:stopPropagation="true">
                    <i class="fa-solid fa-fw fa-times fa-lg"></i>
                </div>
            </div>
        </div>
        <div class="tb-window-content">
            @if (WindowContent is not null)
                @WindowContent
        </div>
    </div>
}

@code {
    #region Configuration

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool Modal { get; set; } = false;

    [Parameter]
    public bool Draggable { get; set; } = true;

    [Parameter]
    public bool Resizable { get; set; } = true;

    [Parameter]
    public int Width { get; set; } = 800;

    [Parameter]
    public int Height { get; set; } = 500;

    private string _left = "50%";
    [Parameter]
    public string Left {
        get => _left;
        set {
            RegexHelpers.ThrowIfNoMatch(RegexHelpers.CSSLengthPattern, value);
            _left = value;
        }
    }

    private string _top = "50%";
    [Parameter]
    public string Top {
        get => _top;
        set {
            RegexHelpers.ThrowIfNoMatch(RegexHelpers.CSSLengthPattern, value);
            _top = value;
        }
    }

    private bool _closed = false;
    [Parameter]
    public bool Closed {
        get => _closed;
        set {
            if (value)
                OnClose?.Invoke(this, new EventArgs());
            _closed = value;
        }
    }

    #endregion

    #region Content

    [Parameter] public RenderFragment? WindowContent { get; set; }

    #endregion

    #region Events

    public event EventHandler OnClose = delegate { };

    #endregion

    #region Event Handlers

    private void CloseButtonClicked(MouseEventArgs args) => Closed = true;

    #endregion

    #region Methods

    public bool Toggle() => Closed = !Closed;

    public void Close() => Closed = true;

    public void Open() => Closed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Components/Window.razor.js");
    }

    #endregion

    #region JS Interop

    private IJSObjectReference? _jsModule;

    private ElementReference? WindowContainer;

    private async Task OnTopbarMouseDown(MouseEventArgs args)
    {
        if (Draggable)
        {
            var windowElement = await _jsModule!.InvokeAsync<ElementReference>("topbarMouseDown", new object[] { args, WindowContainer! });
        }
    }

    private async Task OnResizeSideHandleMouseDown(MouseEventArgs args, string side)
    {
        if (Resizable)
            await _jsModule!.InvokeVoidAsync("resizeSideHandleMouseDown", new object[] { args, WindowContainer!, side });
    }

    private async Task OnResizeCornerHandleMouseDown(MouseEventArgs args, string corner)
    {
        //if (Resizable)
        //    await _jsModule!.InvokeVoidAsync("resizeCornerHandleMouseDown", new object[] { args, WindowContainer!, corner });
    }

    #endregion

    #region Internal

    private readonly Guid _id = Guid.NewGuid();

    private string BuildWindowDimensions => $"width:{Width}px;height:{Height}px;";
    private string BuildWindowPosition => $"left:calc({Left} - {Width / 2}px);top:calc({Top} - {Height / 2}px);";

    private string BuildWindowStyles => BuildWindowDimensions + BuildWindowPosition;

    #endregion
}